{"version":3,"sources":["components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["CustomModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_e$target","target","name","value","type","checked","activeItem","objectSpread","state","defineProperty","setState","_this2","_this$props","toggle","onSave","react_default","a","createElement","reactstrap_es","isOpen","for","title","onChange","placeholder","description","check","completed","color","onClick","Component","App","refreshList","axios","get","then","res","formList","data","catch","err","console","log","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","item","map","key","id","concat","editItem","handleDelete","modal","handleSubmit","put","post","delete","createItem","Modal_CustomModal","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bed05b11.chunk.js","sourcesContent":["// frontend/src/components/Modal.js\n\n   import React, { Component } from \"react\";\n   import {\n     Button,\n     Modal,\n     ModalHeader,\n     ModalBody,\n     ModalFooter,\n     Form,\n     FormGroup,\n     Input,\n     Label\n   } from \"reactstrap\";\n\n   export default class CustomModal extends Component {\n     constructor(props) {\n       super(props);\n       this.state = {\n         activeItem: this.props.activeItem\n       };\n     }\n     handleChange = e => {\n       let { name, value } = e.target;\n       if (e.target.type === \"checkbox\") {\n         value = e.target.checked;\n       }\n       const activeItem = { ...this.state.activeItem, [name]: value };\n       this.setState({ activeItem });\n     };\n     render() {\n       const { toggle, onSave } = this.props;\n       return (\n         <Modal isOpen={true} toggle={toggle}>\n           <ModalHeader toggle={toggle}> Form Item </ModalHeader>\n           <ModalBody>\n             <Form>\n               <FormGroup>\n                 <Label for=\"title\">Title</Label>\n                 <Input\n                   type=\"text\"\n                   name=\"title\"\n                   value={this.state.activeItem.title}\n                   onChange={this.handleChange}\n                   placeholder=\"Enter Form Title\"\n                 />\n               </FormGroup>\n               <FormGroup>\n                 <Label for=\"description\">Description</Label>\n                 <Input\n                   type=\"text\"\n                   name=\"description\"\n                   value={this.state.activeItem.description}\n                   onChange={this.handleChange}\n                   placeholder=\"Enter Form description\"\n                 />\n               </FormGroup>\n               <FormGroup check>\n                 <Label for=\"completed\">\n                   <Input\n                     type=\"checkbox\"\n                     name=\"completed\"\n                     checked={this.state.activeItem.completed}\n                     onChange={this.handleChange}\n                   />\n                   Completed\n                 </Label>\n               </FormGroup>\n             </Form>\n           </ModalBody>\n           <ModalFooter>\n             <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n               Save\n             </Button>\n           </ModalFooter>\n         </Modal>\n       );\n     }\n   }\n","import React, { Component } from \"react\";\n    import Modal from \"./components/Modal\";\n    import axios from \"axios\";\n\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          viewCompleted: false,\n          activeItem: {\n            title: \"\",\n            description: \"\",\n            completed: false\n          },\n          formList: []\n        };\n      }\n      componentDidMount() {\n        this.refreshList();\n      }\n      refreshList = () => {\n        axios\n          .get(\"https://chew-chew.herokuapp.com/api/forms/\")\n          .then(res => this.setState({ formList: res.data }))\n          .catch(err => console.log(err));\n      };\n      displayCompleted = status => {\n        if (status) {\n          return this.setState({ viewCompleted: true });\n        }\n        return this.setState({ viewCompleted: false });\n      };\n      renderTabList = () => {\n        return (\n          <div className=\"my-5 tab-list\">\n            <span\n              onClick={() => this.displayCompleted(true)}\n              className={this.state.viewCompleted ? \"active\" : \"\"}\n            >\n              complete\n            </span>\n            <span\n              onClick={() => this.displayCompleted(false)}\n              className={this.state.viewCompleted ? \"\" : \"active\"}\n            >\n              Incomplete\n            </span>\n          </div>\n        );\n      };\n      renderItems = () => {\n        const { viewCompleted } = this.state;\n        const newItems = this.state.formList.filter(\n          item => item.completed === viewCompleted\n        );\n        return newItems.map(item => (\n          <li\n            key={item.id}\n            className=\"list-group-item d-flex justify-content-between align-items-center\"\n          >\n            <span\n              className={`form-title mr-2 ${\n                this.state.viewCompleted ? \"completed-form\" : \"\"\n              }`}\n              title={item.description}\n            >\n              {item.title}\n            </span>\n            <span>\n              <button\n                onClick={() => this.editItem(item)}\n                className=\"btn btn-secondary mr-2\"\n              >\n                {\" \"}\n                Edit{\" \"}\n              </button>\n              <button\n                onClick={() => this.handleDelete(item)}\n                className=\"btn btn-danger\"\n              >\n                Delete{\" \"}\n              </button>\n            </span>\n          </li>\n        ));\n      };\n      toggle = () => {\n        this.setState({ modal: !this.state.modal });\n      };\n      handleSubmit = item => {\n        this.toggle();\n        if (item.id) {\n          axios\n            .put(`https://chew-chew.herokuapp.com/api/forms/${item.id}/`, item)\n            .then(res => this.refreshList());\n          return;\n        }\n        axios\n          .post(\"https://chew-chew.herokuapp.com/api/forms/\", item)\n          .then(res => this.refreshList());\n      };\n      handleDelete = item => {\n        axios\n          .delete(`https://chew-chew.herokuapp.com/api/forms/${item.id}`)\n          .then(res => this.refreshList());\n      };\n      createItem = () => {\n        const item = { title: \"\", description: \"\", completed: false };\n        this.setState({ activeItem: item, modal: !this.state.modal });\n      };\n      editItem = item => {\n        this.setState({ activeItem: item, modal: !this.state.modal });\n      };\n      render() {\n        return (\n          <main className=\"content\">\n            <h1 className=\"text-white text-uppercase text-center my-4\">Form app</h1>\n            <div className=\"row \">\n              <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n                <div className=\"card p-3\">\n                  <div className=\"\">\n                    <button onClick={this.createItem} className=\"btn btn-primary\">\n                      Add task\n                    </button>\n                  </div>\n                  {this.renderTabList()}\n                  <ul className=\"list-group list-group-flush\">\n                    {this.renderItems()}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {this.state.modal ? (\n              <Modal\n                activeItem={this.state.activeItem}\n                toggle={this.toggle}\n                onSave={this.handleSubmit}\n              />\n            ) : null}\n          </main>\n        );\n      }\n    }\n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';       // add this\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}